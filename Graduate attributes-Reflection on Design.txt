Reflection on the design of the Plants and Zombies game:

For the coding of the game we have used various concepts that were taught during the entire course like junit testing, GUI, the design pattern MVC that we used for the game, the UML diagram cycle and the other design principles like loose coupling ,high cohesion and etc  that have been used in the coding of the Game.

Starting with Milestone 1, we made a console version that just contained that model class(from which most of implementation of game came from)  along with the helper classes like one kind of the plant and one type of zombie were implemented along with basic methods like shoot,attack and etc. According to the software engineering design principles Milestone 1 for our group was a bad design as our code was violating the law of demeter, the code was tightly coupled . 

For Milestone 2, we changed the design of the game making the game more right according the design principles and  made a GUI(Graphical User Interface) version of the game following the MVC design pattern . For milestone 2, we used array for the view GRID system, array for storing zombies , array for storing different types of characters like plants, zombies which made the code more loose coupled  and hence decreasing the dependency of classes on each other.This accounted to a better design of the game for Milestone 2 , along with JUNIT tests that uses the bogus parameter for different kind of plants and zombies. 

Milestone 3 was implementing the undo and the redo feature of the game, for which we  implemented the stack and made a separate class for the undo and redo , as a practise to good design techniques for the game. 

Moving on to Milestone 4,we added the save and  load and feature to the game that we implemented using the  writeObject and readObject method that writes the specified object to the ObjectOutputStream and ObjectInputStream. The class of the object, the signature of the class, and the values of the non-transient and non-static fields of the class and all of its supertypes are written. We have also used the cloneable and serialization interfaces because When you use some marker interface(no method implementation ) you want to tell jvm or compiler for adding or checking something during runtime or compile time. But, unfortunately, we could not make the new level to work, but the coding for the creating the level is in createLevel class and level classes. Probably, there some minute bug in the createLevel class because of which the new level was left in non working condition (KNOWN ISSUE). Beside, the game work perfectly fine and very less random errors that pop up once in while.

-------------------------------------------------------------------------------------------------------------------

What do we like or dislike about the code of the game and the game in general ?

The Project overall was a great learning process for all the members of our group which was finished successfully except we could'nt make the new Level to work. Taking a look at at code, we can say the code follows the major design design principles which are a learning outcome of this course. But ,looking at the pieces itself the code smells a bit in the controller and the model class which sometimes becomes hard to understand due to a lot of if's and else if's in the code. We could'nt figure out another effective way to do it without messing the game up. From, day one we have tried to keep the code less smelly as possible. To some some extent we have been effective too. Another thing that  we think could have improved that cohesion of the game , the methods and the data in the model package escpecially the model, character class are doing more than they these classes are required. Because of time constraint, we were unable to make it highly cohesive. Another one thing that we would want to do was to add more plants and zombies to game and then convert it real time version( to make it look like a real game) , we would definitely work on that in the following summer. Sometimes, they are some random errors at the start of the game that we would want to figure out to fix the bugs in the game.Other than, it was a  great learning process to learn software engineering principles by the means of this Game.
